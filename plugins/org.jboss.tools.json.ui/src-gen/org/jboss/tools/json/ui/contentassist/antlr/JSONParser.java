/*
* generated by Xtext
*/
package org.jboss.tools.json.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.jboss.tools.json.services.JSONGrammarAccess;

public class JSONParser extends AbstractContentAssistParser {
	
	@Inject
	private JSONGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.jboss.tools.json.ui.contentassist.antlr.internal.InternalJSONParser createParser() {
		org.jboss.tools.json.ui.contentassist.antlr.internal.InternalJSONParser result = new org.jboss.tools.json.ui.contentassist.antlr.internal.InternalJSONParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getJSONSimpleValueAccess().getAlternatives(), "rule__JSONSimpleValue__Alternatives");
					put(grammarAccess.getJSONObjectAccess().getGroup(), "rule__JSONObject__Group__0");
					put(grammarAccess.getJSONObjectAccess().getGroup_2(), "rule__JSONObject__Group_2__0");
					put(grammarAccess.getJSONObjectAccess().getGroup_2_1(), "rule__JSONObject__Group_2_1__0");
					put(grammarAccess.getPairAccess().getGroup(), "rule__Pair__Group__0");
					put(grammarAccess.getJSONArrayAccess().getGroup(), "rule__JSONArray__Group__0");
					put(grammarAccess.getJSONArrayAccess().getGroup_2(), "rule__JSONArray__Group_2__0");
					put(grammarAccess.getJSONModelAccess().getRootObjectAssignment(), "rule__JSONModel__RootObjectAssignment");
					put(grammarAccess.getJSONObjectAccess().getPairsAssignment_2_0(), "rule__JSONObject__PairsAssignment_2_0");
					put(grammarAccess.getJSONObjectAccess().getPairsAssignment_2_1_1(), "rule__JSONObject__PairsAssignment_2_1_1");
					put(grammarAccess.getPairAccess().getKeyAssignment_0(), "rule__Pair__KeyAssignment_0");
					put(grammarAccess.getPairAccess().getValueAssignment_2(), "rule__Pair__ValueAssignment_2");
					put(grammarAccess.getKeyAccess().getNameAssignment(), "rule__Key__NameAssignment");
					put(grammarAccess.getJSONArrayAccess().getElementsAssignment_1(), "rule__JSONArray__ElementsAssignment_1");
					put(grammarAccess.getJSONArrayAccess().getElementsAssignment_2_1(), "rule__JSONArray__ElementsAssignment_2_1");
					put(grammarAccess.getQuotedCharsAccess().getValueAssignment(), "rule__QuotedChars__ValueAssignment");
					put(grammarAccess.getNumberAccess().getValueAssignment(), "rule__Number__ValueAssignment");
					put(grammarAccess.getNullAccess().getValueAssignment(), "rule__Null__ValueAssignment");
					put(grammarAccess.getFalseAccess().getValueAssignment(), "rule__False__ValueAssignment");
					put(grammarAccess.getTrueAccess().getValueAssignment(), "rule__True__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.jboss.tools.json.ui.contentassist.antlr.internal.InternalJSONParser typedParser = (org.jboss.tools.json.ui.contentassist.antlr.internal.InternalJSONParser) parser;
			typedParser.entryRuleJSONModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public JSONGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(JSONGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
