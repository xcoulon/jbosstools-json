/*
* generated by Xtext
*/
grammar InternalJSON;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.jboss.tools.jsoneditor.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.jboss.tools.jsoneditor.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.jboss.tools.jsoneditor.services.JSONGrammarAccess;

}

@parser::members {

 	private JSONGrammarAccess grammarAccess;
 	
    public InternalJSONParser(TokenStream input, JSONGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "JSONModel";	
   	}
   	
   	@Override
   	protected JSONGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleJSONModel
entryRuleJSONModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJSONModelRule()); }
	 iv_ruleJSONModel=ruleJSONModel 
	 { $current=$iv_ruleJSONModel.current; } 
	 EOF 
;

// Rule JSONModel
ruleJSONModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getJSONModelAccess().getRootObjectJSONObjectParserRuleCall_0()); 
	    }
		lv_rootObject_0_0=ruleJSONObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJSONModelRule());
	        }
       		set(
       			$current, 
       			"rootObject",
        		lv_rootObject_0_0, 
        		"JSONObject");
	        afterParserOrEnumRuleCall();
	    }

)
)?
;





// Entry rule entryRuleJSONObject
entryRuleJSONObject returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getJSONObjectRule()); }
	 iv_ruleJSONObject=ruleJSONObject 
	 { $current=$iv_ruleJSONObject.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule JSONObject
ruleJSONObject returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getJSONObjectAccess().getJSONObjectAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJSONObjectAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getJSONObjectAccess().getPairsPairParserRuleCall_2_0_0()); 
	    }
		lv_pairs_2_0=rulePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJSONObjectRule());
	        }
       		add(
       			$current, 
       			"pairs",
        		lv_pairs_2_0, 
        		"Pair");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_TERMINAL_COMMA_3=RULE_TERMINAL_COMMA
    { 
    newLeafNode(this_TERMINAL_COMMA_3, grammarAccess.getJSONObjectAccess().getTERMINAL_COMMATerminalRuleCall_2_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJSONObjectAccess().getPairsPairParserRuleCall_2_1_1_0()); 
	    }
		lv_pairs_4_0=rulePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJSONObjectRule());
	        }
       		add(
       			$current, 
       			"pairs",
        		lv_pairs_4_0, 
        		"Pair");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJSONObjectAccess().getRightCurlyBracketKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePair
entryRulePair returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPairRule()); }
	 iv_rulePair=rulePair 
	 { $current=$iv_rulePair.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Pair
rulePair returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPairAccess().getKeyKeyParserRuleCall_0_0()); 
	    }
		lv_key_0_0=ruleKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPairRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"Key");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPairAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPairAccess().getValueValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPairRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleKey
entryRuleKey returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyRule()); }
	 iv_ruleKey=ruleKey 
	 { $current=$iv_ruleKey.current; } 
	 EOF 
;

// Rule Key
ruleKey returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_TERMINAL_QUOTED_CHARS
		{
			newLeafNode(lv_name_0_0, grammarAccess.getKeyAccess().getNameTERMINAL_QUOTED_CHARSTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TERMINAL_QUOTED_CHARS");
	    }

)
)
;





// Entry rule entryRuleJSONArray
entryRuleJSONArray returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getJSONArrayRule()); }
	 iv_ruleJSONArray=ruleJSONArray 
	 { $current=$iv_ruleJSONArray.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule JSONArray
ruleJSONArray returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJSONArrayAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJSONArrayAccess().getElementsValueParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJSONArrayRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_TERMINAL_COMMA_2=RULE_TERMINAL_COMMA
    { 
    newLeafNode(this_TERMINAL_COMMA_2, grammarAccess.getJSONArrayAccess().getTERMINAL_COMMATerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJSONArrayAccess().getElementsValueParserRuleCall_2_1_0()); 
	    }
		lv_elements_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJSONArrayRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getJSONArrayAccess().getRightSquareBracketKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getJSONArrayParserRuleCall_0()); 
    }
    this_JSONArray_0=ruleJSONArray
    { 
        $current = $this_JSONArray_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getJSONObjectParserRuleCall_1()); 
    }
    this_JSONObject_1=ruleJSONObject
    { 
        $current = $this_JSONObject_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getJSONSimpleValueParserRuleCall_2()); 
    }
    this_JSONSimpleValue_2=ruleJSONSimpleValue
    { 
        $current = $this_JSONSimpleValue_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJSONSimpleValue
entryRuleJSONSimpleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJSONSimpleValueRule()); }
	 iv_ruleJSONSimpleValue=ruleJSONSimpleValue 
	 { $current=$iv_ruleJSONSimpleValue.current; } 
	 EOF 
;

// Rule JSONSimpleValue
ruleJSONSimpleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJSONSimpleValueAccess().getQuotedCharsParserRuleCall_0()); 
    }
    this_QuotedChars_0=ruleQuotedChars
    { 
        $current = $this_QuotedChars_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJSONSimpleValueAccess().getNumberParserRuleCall_1()); 
    }
    this_Number_1=ruleNumber
    { 
        $current = $this_Number_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJSONSimpleValueAccess().getNullParserRuleCall_2()); 
    }
    this_Null_2=ruleNull
    { 
        $current = $this_Null_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJSONSimpleValueAccess().getTrueParserRuleCall_3()); 
    }
    this_True_3=ruleTrue
    { 
        $current = $this_True_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJSONSimpleValueAccess().getFalseParserRuleCall_4()); 
    }
    this_False_4=ruleFalse
    { 
        $current = $this_False_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleQuotedChars
entryRuleQuotedChars returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuotedCharsRule()); }
	 iv_ruleQuotedChars=ruleQuotedChars 
	 { $current=$iv_ruleQuotedChars.current; } 
	 EOF 
;

// Rule QuotedChars
ruleQuotedChars returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_TERMINAL_QUOTED_CHARS
		{
			newLeafNode(lv_value_0_0, grammarAccess.getQuotedCharsAccess().getValueTERMINAL_QUOTED_CHARSTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuotedCharsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"TERMINAL_QUOTED_CHARS");
	    }

)
)
;





// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current; } 
	 EOF 
;

// Rule Number
ruleNumber returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_TERMINAL_NUMBER
		{
			newLeafNode(lv_value_0_0, grammarAccess.getNumberAccess().getValueTERMINAL_NUMBERTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"TERMINAL_NUMBER");
	    }

)
)
;





// Entry rule entryRuleNull
entryRuleNull returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullRule()); }
	 iv_ruleNull=ruleNull 
	 { $current=$iv_ruleNull.current; } 
	 EOF 
;

// Rule Null
ruleNull returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_TERMINAL_NULL
		{
			newLeafNode(lv_value_0_0, grammarAccess.getNullAccess().getValueTERMINAL_NULLTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"TERMINAL_NULL");
	    }

)
)
;





// Entry rule entryRuleFalse
entryRuleFalse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFalseRule()); }
	 iv_ruleFalse=ruleFalse 
	 { $current=$iv_ruleFalse.current; } 
	 EOF 
;

// Rule False
ruleFalse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_TERMINAL_FALSE
		{
			newLeafNode(lv_value_0_0, grammarAccess.getFalseAccess().getValueTERMINAL_FALSETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFalseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"TERMINAL_FALSE");
	    }

)
)
;





// Entry rule entryRuleTrue
entryRuleTrue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrueRule()); }
	 iv_ruleTrue=ruleTrue 
	 { $current=$iv_ruleTrue.current; } 
	 EOF 
;

// Rule True
ruleTrue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_TERMINAL_TRUE
		{
			newLeafNode(lv_value_0_0, grammarAccess.getTrueAccess().getValueTERMINAL_TRUETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"TERMINAL_TRUE");
	    }

)
)
;





RULE_TERMINAL_QUOTED_CHARS : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_TERMINAL_NUMBER : '-'? ('0'|RULE_DIGIT_1_9 RULE_DIGIT*) ('.' RULE_DIGIT+)? (RULE_EXP RULE_PLUS_MINUS? RULE_DIGIT+)?;

fragment RULE_DIGIT_1_9 : '1'..'9';

fragment RULE_DIGIT : '0'..'9';

fragment RULE_EXP : ('e'|'E');

fragment RULE_PLUS_MINUS : ('+'|'-');

RULE_TERMINAL_NULL : 'null';

RULE_TERMINAL_FALSE : 'false';

RULE_TERMINAL_TRUE : 'true';

RULE_TERMINAL_COMMA : ',';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


